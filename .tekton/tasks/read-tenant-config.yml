apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: read-tenant-config
spec:
  workspaces:
    - name: workspace-tenant 
  stepTemplate:
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
            optional: true
      - name: TRIGGER_NAME
        valueFrom:
          fieldRef:
            fieldPath: metadata.annotations['devops.cloud.ibm.com/trigger-name']
  params:
    - name: ibmcloud-api
      description: the ibmcloud api
    - name: continuous-delivery-context-secret
      description: name of the secret containing the continuous delivery pipeline context secrets
      default: secure-properties
    - name: ibmcloud-apikey-secret-key
      description: field in the secret that contains the api key used to login to ibmcloud
      default: apikey
  results:
    - name: IBM_CLOUD_RESOURCE_GROUP
    - name: IBM_CLOUD_REGION
    - name: REGISTRY_NAMESPACE
    - name: REGISTRY_TAG
    - name: REGISTRY_URL
    - name: REGISTRY_SECRET_NAME
    - name: IMAGES_NAME_BACKEND
    - name: IMAGES_NAME_FRONTEND
    - name: TENANT
    - name: APPID_SERVICE_INSTANCE_NAME
    - name: APPID_SERVICE_KEY_NAME
    - name: POSTGRES_SERVICE_INSTANCE
    - name: POSTGRES_SERVICE_KEY_NAME
    - name: POSTGRES_SQL_FILE
    - name: APPLICATION_CONTAINER_NAME_BACKEND
    - name: APPLICATION_CONTAINER_NAME_FRONTEND
    - name: APPLICATION_CATEGORY
    - name: CODE_ENGINE_PROJECT_NAME
  steps:
    - name: read-tenant-config
      image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.3
      script: |
        #!/bin/bash
        echo "read-tenant-config"        
        set -x
        cd $(workspaces.workspace-tenant.path)
        #example: https://github.com/IBM/multi-tenancy/blob/main/configuration/global.json

        CONFIG_FILE="configuration/global.json"
        CONFIG_FILE_ENV="configuration/global.env"
        rm $CONFIG_FILE_ENV
        touch $CONFIG_FILE_ENV

        IBM_CLOUD_RESOURCE_GROUP=$(cat ./$CONFIG_FILE | jq '.IBM_CLOUD.RESOURCE_GROUP' | sed 's/"//g')
        printf "IBM_CLOUD_RESOURCE_GROUP=$IBM_CLOUD_RESOURCE_GROUP" >> $CONFIG_FILE_ENV
        echo -n "$IBM_CLOUD_RESOURCE_GROUP" > $(results.IBM_CLOUD_RESOURCE_GROUP.path)
        IBM_CLOUD_REGION=$(cat ./$CONFIG_FILE | jq '.IBM_CLOUD.REGION' | sed 's/"//g')
        printf "\nIBM_CLOUD_REGION=$IBM_CLOUD_REGION" >> $CONFIG_FILE_ENV
        echo -n "$IBM_CLOUD_REGION" > $(results.IBM_CLOUD_REGION.path)

        REGISTRY_NAMESPACE=$(cat ./$CONFIG_FILE | jq '.REGISTRY.NAMESPACE' | sed 's/"//g')
        printf "\nREGISTRY_NAMESPACE=$REGISTRY_NAMESPACE" >> $CONFIG_FILE_ENV
        echo -n "$REGISTRY_NAMESPACE" > $(results.REGISTRY_NAMESPACE.path)
        REGISTRY_TAG=$(cat ./$CONFIG_FILE | jq '.REGISTRY.TAG' | sed 's/"//g')
        printf "\nREGISTRY_TAG=$REGISTRY_TAG" >> $CONFIG_FILE_ENV
        echo -n "$REGISTRY_TAG" > $(results.REGISTRY_TAG.path)
        REGISTRY_URL=$(cat ./$CONFIG_FILE | jq '.REGISTRY.URL' | sed 's/"//g')
        printf "\nREGISTRY_URL=$REGISTRY_URL" >> $CONFIG_FILE_ENV
        echo -n "$REGISTRY_URL" > $(results.REGISTRY_URL.path)
        REGISTRY_SECRET_NAME=$(cat ./$CONFIG_FILE | jq '.REGISTRY.SECRET_NAME' | sed 's/"//g')
        printf "\nREGISTRY_SECRET_NAME=$REGISTRY_SECRET_NAME" >> $CONFIG_FILE_ENV
        echo -n "$REGISTRY_SECRET_NAME" > $(results.REGISTRY_SECRET_NAME.path)
        
        IMAGES_NAME_BACKEND=$(cat ./$CONFIG_FILE | jq '.IMAGES.NAME_BACKEND' | sed 's/"//g')
        printf "\nIMAGES_NAME_BACKEND=$IMAGES_NAME_BACKEND" >> $CONFIG_FILE_ENV
        echo -n "$IMAGES_NAME_BACKEND" > $(results.IMAGES_NAME_BACKEND.path)
        IMAGES_NAME_FRONTEND=$(cat ./$CONFIG_FILE | jq '.IMAGES.NAME_FRONTEND' | sed 's/"//g')
        printf "\nIMAGES_NAME_FRONTEND=$IMAGES_NAME_FRONTEND" >> $CONFIG_FILE_ENV
        echo -n "$IMAGES_NAME_FRONTEND" > $(results.IMAGES_NAME_FRONTEND.path)

        printf "\nTENANT=$TRIGGER_NAME" >> $CONFIG_FILE_ENV
        echo -n "$TENANT" > $(results.TENANT.path)
        #example: https://github.com/IBM/multi-tenancy/blob/main/configuration/tenants/tenant-a.json
        CONFIG_FILE="configuration/tenants/${TRIGGER_NAME}.json"

        APPID_SERVICE_INSTANCE_NAME=$(cat ./$CONFIG_FILE | jq '.APP_ID.SERVICE_INSTANCE' | sed 's/"//g')
        printf "\nAPPID_SERVICE_INSTANCE_NAME=$APPID_SERVICE_INSTANCE_NAME" >> $CONFIG_FILE_ENV
        echo -n "$APPID_SERVICE_INSTANCE_NAME" > $(results.APPID_SERVICE_INSTANCE_NAME.path)
        APPID_SERVICE_KEY_NAME=$(cat ./$CONFIG_FILE | jq '.APP_ID.SERVICE_KEY_NAME' | sed 's/"//g')
        printf "\nAPPID_SERVICE_KEY_NAME=$APPID_SERVICE_KEY_NAME" >> $CONFIG_FILE_ENV
        echo -n "$APPID_SERVICE_KEY_NAME" > $(results.APPID_SERVICE_KEY_NAME.path)

        POSTGRES_SERVICE_INSTANCE=$(cat ./$CONFIG_FILE | jq '.POSTGRES.SERVICE_INSTANCE' | sed 's/"//g') 
        printf "\nPOSTGRES_SERVICE_INSTANCE=$POSTGRES_SERVICE_INSTANCE" >> $CONFIG_FILE_ENV
        echo -n "$POSTGRES_SERVICE_INSTANCE" > $(results.POSTGRES_SERVICE_INSTANCE.path)
        POSTGRES_SERVICE_KEY_NAME=$(cat ./$CONFIG_FILE | jq '.POSTGRES.SERVICE_KEY_NAME' | sed 's/"//g')
        printf "\nPOSTGRES_SERVICE_KEY_NAME=$POSTGRES_SERVICE_KEY_NAME" >> $CONFIG_FILE_ENV
        echo -n "$POSTGRES_SERVICE_KEY_NAME" > $(results.POSTGRES_SERVICE_KEY_NAME.path)
        POSTGRES_SQL_FILE=$(cat ./$CONFIG_FILE | jq '.POSTGRES.SQL_FILE' | sed 's/"//g')
        printf "\nPOSTGRES_SQL_FILE=$POSTGRES_SQL_FILE" >> $CONFIG_FILE_ENV
        echo -n "$POSTGRES_SQL_FILE" > $(results.POSTGRES_SQL_FILE.path)

        APPLICATION_CONTAINER_NAME_BACKEND=$(cat ./$CONFIG_FILE | jq '.APPLICATION.CONTAINER_NAME_BACKEND' | sed 's/"//g') 
        printf "\nAPPLICATION_CONTAINER_NAME_BACKEND=$APPLICATION_CONTAINER_NAME_BACKEND" >> $CONFIG_FILE_ENV
        echo -n "$APPLICATION_CONTAINER_NAME_BACKEND" > $(results.APPLICATION_CONTAINER_NAME_BACKEND.path)
        APPLICATION_CONTAINER_NAME_FRONTEND=$(cat ./$CONFIG_FILE | jq '.APPLICATION.CONTAINER_NAME_FRONTEND' | sed 's/"//g')
        printf "\nAPPLICATION_CONTAINER_NAME_FRONTEND=$APPLICATION_CONTAINER_NAME_FRONTEND" >> $CONFIG_FILE_ENV
        echo -n "$APPLICATION_CONTAINER_NAME_FRONTEND" > $(results.APPLICATION_CONTAINER_NAME_FRONTEND.path)
        APPLICATION_CATEGORY=$(cat ./$CONFIG_FILE | jq '.APPLICATION.CATEGORY' | sed 's/"//g')
        printf "\nAPPLICATION_CATEGORY=$APPLICATION_CATEGORY" >> $CONFIG_FILE_ENV
        echo -n "$APPLICATION_CATEGORY" > $(results.APPLICATION_CATEGORY.path)

        CODE_ENGINE_PROJECT_NAME=$(cat ./$CONFIG_FILE | jq '.CODE_ENGINE.PROJECT_NAME' | sed 's/"//g') 
        printf "\nCODE_ENGINE_PROJECT_NAME=$CODE_ENGINE_PROJECT_NAME" >> $CONFIG_FILE_ENV
        echo -n "$CODE_ENGINE_PROJECT_NAME" > $(results.CODE_ENGINE_PROJECT_NAME.path)

        cat $CONFIG_FILE_ENV