apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: read-tenant-config
spec:
  workspaces:
    - name: workspace-backend-tenant 
  stepTemplate:
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
            optional: true
      - name: TRIGGER_NAME
        valueFrom:
          fieldRef:
            fieldPath: metadata.annotations['devops.cloud.ibm.com/trigger-name']
  params:
    - name: ibmcloud-api
      description: the ibmcloud api
    - name: continuous-delivery-context-secret
      description: name of the secret containing the continuous delivery pipeline context secrets
      default: secure-properties
    - name: ibmcloud-apikey-secret-key
      description: field in the secret that contains the api key used to login to ibmcloud
      default: apikey
  results:
    - name: IBM_CLOUD_RESOURCE_GROUP
    - name: IBM_CLOUD_REGION
    - name: REGISTRY_NAMESPACE
    - name: REGISTRY_TAG
    - name: REGISTRY_URL
    - name: REGISTRY_SECRET_NAME
    - name: IMAGES_NAME_BACKEND
    - name: IMAGES_NAME_FRONTEND
    - name: TENANT
    - name: APPID_SERVICE_INSTANCE_NAME
    - name: APPID_SERVICE_KEY_NAME
    - name: POSTGRES_SERVICE_INSTANCE
    - name: POSTGRES_SERVICE_KEY_NAME
    - name: POSTGRES_SQL_FILE
    - name: APPLICATION_CONTAINER_NAME_BACKEND
    - name: APPLICATION_CONTAINER_NAME-FRONTEND
    - name: APPLICATION_CATEGORY
    - name: CODE_ENGINE_PROJECT_NAME
  steps:
    - name: read-tenant-config
      image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.3
      script: |
        #!/bin/bash
        echo "read-tenant-config"        
        set -x
        cd $(workspaces.workspace-backend-tenant.path)
        #example: https://github.com/IBM/multi-tenancy/blob/main/configuration/global.json

        CONFIG_FILE="configuration/global.json"
        CONFIG_FILE_ENV="configuration/global.env"
        rm $CONFIG_FILE_ENV
        touch $CONFIG_FILE_ENV

        IBM_CLOUD_RESOURCE_GROUP=$(cat ./$CONFIG_FILE | jq '.IBM_CLOUD.RESOURCE_GROUP' | sed 's/"//g')
        printf "IBM_CLOUD_RESOURCE_GROUP=$IBM_CLOUD_RESOURCE_GROUP" >> $CONFIG_FILE_ENV
        echo -n "$IBM_CLOUD_RESOURCE_GROUP" > $(results.IBM_CLOUD_RESOURCE_GROUP.path)
        IBM_CLOUD_REGION=$(cat ./$CONFIG_FILE | jq '.IBM_CLOUD.REGION' | sed 's/"//g')
        printf "\nIBM_CLOUD_REGION=$IBM_CLOUD_REGION" >> $CONFIG_FILE_ENV
        echo -n "$IBM_CLOUD_REGION" > $(results.IBM_CLOUD_REGION.path)

        REGISTRY_NAMESPACE=$(cat ./$CONFIG_FILE | jq '.REGISTRY.NAMESPACE' | sed 's/"//g')
        printf "\nREGISTRY_NAMESPACE=$REGISTRY_NAMESPACE" >> $CONFIG_FILE_ENV
        echo -n "$REGISTRY_NAMESPACE" > $(results.REGISTRY_NAMESPACE.path)
        REGISTRY_TAG=$(cat ./$CONFIG_FILE | jq '.REGISTRY.TAG' | sed 's/"//g')
        printf "\nREGISTRY_TAG=$REGISTRY_TAG" >> $CONFIG_FILE_ENV
        echo -n "$REGISTRY_TAG" > $(results.REGISTRY_TAG.path)
        REGISTRY_URL=$(cat ./$CONFIG_FILE | jq '.REGISTRY.URL' | sed 's/"//g')
        printf "\nREGISTRY_URL=$REGISTRY_URL" >> $CONFIG_FILE_ENV
        echo -n "$REGISTRY_URL" > $(results.REGISTRY_URL.path)
        REGISTRY_SECRET_NAME=$(cat ./$CONFIG_FILE | jq '.REGISTRY.SECRET_NAME' | sed 's/"//g')
        printf "\nREGISTRY_SECRET_NAME=$REGISTRY_SECRET_NAME" >> $CONFIG_FILE_ENV
        echo -n "$REGISTRY_SECRET_NAME" > $(results.REGISTRY_SECRET_NAME.path)
        
        IMAGES_NAME_BACKEND=$(cat ./$CONFIG_FILE | jq '.IMAGES.NAME_BACKEND' | sed 's/"//g')
        printf "\nIMAGES_NAME_BACKEND=$IMAGES_NAME_BACKEND" >> $CONFIG_FILE_ENV
        echo -n "$IMAGES_NAME_BACKEND" > $(results.IMAGES_NAME_BACKEND.path)
        IMAGES_NAME_FRONTEND=$(cat ./$CONFIG_FILE | jq '.IMAGES.NAME_FRONTEND' | sed 's/"//g')
        printf "\nIMAGES_NAME_FRONTEND=$IMAGES_NAME_FRONTEND" >> $CONFIG_FILE_ENV
        echo -n "$IMAGES_NAME_FRONTEND" > $(results.IMAGES_NAME_FRONTEND.path)

        printf "\nTENANT=$TRIGGER_NAME" >> $CONFIG_FILE_ENV
        echo -n "$TENANT" > $(results.TENANT.path)
        #example: https://github.com/IBM/multi-tenancy/blob/main/configuration/tenants/tenant-a.json
        CONFIG_FILE="configuration/tenants/${TRIGGER_NAME}.json"

        APPID_SERVICE_INSTANCE_NAME=$(cat ./$CONFIG_FILE | jq '.APP_ID.SERVICE_INSTANCE' | sed 's/"//g')
        printf "\nAPPID_SERVICE_INSTANCE_NAME=$APPID_SERVICE_INSTANCE_NAME" >> $CONFIG_FILE_ENV
        echo -n "$APPID_SERVICE_INSTANCE_NAME" > $(results.APPID_SERVICE_INSTANCE_NAME.path)
        APPID_SERVICE_KEY_NAME=$(cat ./$CONFIG_FILE | jq '.APP_ID.SERVICE_KEY_NAME' | sed 's/"//g')
        printf "\nAPPID_SERVICE_KEY_NAME=$APPID_SERVICE_KEY_NAME" >> $CONFIG_FILE_ENV
        echo -n "$APPID_SERVICE_KEY_NAME" > $(results.APPID_SERVICE_KEY_NAME.path)

        POSTGRES_SERVICE_INSTANCE=$(cat ./$CONFIG_FILE | jq '.POSTGRES.SERVICE_INSTANCE' | sed 's/"//g') 
        printf "\nPOSTGRES_SERVICE_INSTANCE=$POSTGRES_SERVICE_INSTANCE" >> $CONFIG_FILE_ENV
        echo -n "$POSTGRES_SERVICE_INSTANCE" > $(results.POSTGRES_SERVICE_INSTANCE.path)
        POSTGRES_SERVICE_KEY_NAME=$(cat ./$CONFIG_FILE | jq '.POSTGRES.SERVICE_KEY_NAME' | sed 's/"//g')
        printf "\nPOSTGRES_SERVICE_KEY_NAME=$POSTGRES_SERVICE_KEY_NAME" >> $CONFIG_FILE_ENV
        echo -n "$POSTGRES_SERVICE_KEY_NAME" > $(results.POSTGRES_SERVICE_KEY_NAME.path)
        POSTGRES_SQL_FILE=$(cat ./$CONFIG_FILE | jq '.POSTGRES.SQL_FILE' | sed 's/"//g')
        printf "\nPOSTGRES_SQL_FILE=$POSTGRES_SQL_FILE" >> $CONFIG_FILE_ENV
        echo -n "$POSTGRES_SQL_FILE" > $(results.POSTGRES_SQL_FILE.path)

        APPLICATION_CONTAINER_NAME_BACKEND=$(cat ./$CONFIG_FILE | jq '.APPLICATION.CONTAINER_NAME_BACKEND' | sed 's/"//g') 
        printf "\nAPPLICATION_CONTAINER_NAME_BACKEND=$APPLICATION_CONTAINER_NAME_BACKEND" >> $CONFIG_FILE_ENV
        echo -n "$APPLICATION_CONTAINER_NAME_BACKEND" > $(results.APPLICATION_CONTAINER_NAME_BACKEND.path)
        APPLICATION_CONTAINER_NAME_FRONTEND=$(cat ./$CONFIG_FILE | jq '.APPLICATION.CONTAINER_NAME_FRONTEND' | sed 's/"//g')
        printf "\nAPPLICATION_CONTAINER_NAME_FRONTEND=$APPLICATION_CONTAINER_NAME_FRONTEND" >> $CONFIG_FILE_ENV
        echo -n "$APPLICATION_CONTAINER_NAME_FRONTEND" > $(results.APPLICATION_CONTAINER_NAME_FRONTEND.path)
        APPLICATION_CATEGORY=$(cat ./$CONFIG_FILE | jq '.APPLICATION.CATEGORY' | sed 's/"//g')
        printf "\nAPPLICATION_CATEGORY=$APPLICATION_CATEGORY" >> $CONFIG_FILE_ENV
        echo -n "$APPLICATION_CATEGORY" > $(results.APPLICATION_CATEGORY.path)

        CODE_ENGINE_PROJECT_NAME=$(cat ./$CONFIG_FILE | jq '.CODE_ENGINE.PROJECT_NAME' | sed 's/"//g') 
        printf "\nCODE_ENGINE_PROJECT_NAME=$CODE_ENGINE_PROJECT_NAME" >> $CONFIG_FILE_ENV
        echo -n "$CODE_ENGINE_PROJECT_NAME" > $(results.CODE_ENGINE_PROJECT_NAME.path)

        cat $CONFIG_FILE_ENV

        ibmcloud config --check-version false
        ibmcloud login -a $(params.ibmcloud-api) --no-region --apikey $API_KEY
        ibmcloud target -g $IBM_CLOUD_RESOURCE_GROUP
        ibmcloud target -r $IBM_CLOUD_REGION   

        ibmcloud plugin install code-engine  
        
        #####################

        ibmcloud ce project get --name $CODE_ENGINE_PROJECT_NAME
        ibmcloud ce project select -n $CODE_ENGINE_PROJECT_NAME
      
        ibmcloud ce project select -n $CODE_ENGINE_PROJECT_NAME --kubecfg

        #####################

        ibmcloud resource service-key $POSTGRES_SERVICE_KEY_NAME --output JSON > ./postgres-key-temp.json  

        POSTGRES_CERTIFICATE_CONTENT_ENCODED=$(cat ./postgres-key-temp.json | jq '.[].credentials.connection.cli.certificate.certificate_base64' | sed 's/"//g' ) 
        POSTGRES_USERNAME=$(cat ./postgres-key-temp.json | jq '.[].credentials.connection.postgres.authentication.username' | sed 's/"//g' )
        POSTGRES_PASSWORD=$(cat ./postgres-key-temp.json | jq '.[].credentials.connection.postgres.authentication.password' | sed 's/"//g' )
        POSTGRES_HOST=$(cat ./postgres-key-temp.json | jq '.[].credentials.connection.postgres.hosts[].hostname' | sed 's/"//g' )
        POSTGRES_PORT=$(cat ./postgres-key-temp.json | jq '.[].credentials.connection.postgres.hosts[].port' | sed 's/"//g' )

        echo "$POSTGRES_CERTIFICATE_CONTENT_ENCODED" | base64 -d -o ./cert.temp
        POSTGRES_CERTIFICATE_DATA=$(<./cert.temp)

        POSTGRES_CONNECTION_TYPE='jdbc:postgresql://'
        POSTGRES_CERTIFICATE_PATH='/cloud-postgres-cert'
        POSTGRES_DATABASE_NAME="ibmclouddb"
        POSTGRES_URL="$POSTGRES_CONNECTION_TYPE$POSTGRES_HOST:$POSTGRES_PORT/$POSTGRES_DATABASE_NAME?sslmode=verify-full&sslrootcert=$POSTGRES_CERTIFICATE_PATH"

        #####################

        ibmcloud resource service-key $APPID_SERVICE_KEY_NAME --output JSON > ./appid-key-temp.json

        APPID_OAUTHSERVERURL=$(cat ./appid-key-temp.json | jq '.[].credentials.oauthServerUrl' | sed 's/"//g' ) 
        APPID_CLIENT_ID=$(cat ./appid-key-temp.json | jq '.[].credentials.clientId' | sed 's/"//g' )

        #####################
        
        ibmcloud ce secret update --name postgres.certificate-data --from-literal "POSTGRES_CERTIFICATE_DATA=$POSTGRES_CERTIFICATE_DATA"
        ibmcloud ce secret update --name postgres.username --from-literal "POSTGRES_USERNAME=$POSTGRES_USERNAME"
        ibmcloud ce secret update --name postgres.password --from-literal "POSTGRES_PASSWORD=$POSTGRES_PASSWORD"
        ibmcloud ce secret update --name postgres.url --from-literal "POSTGRES_URL=$POSTGRES_URL"

        ibmcloud ce secret update --name appid.oauthserverurl --from-literal "APPID_AUTH_SERVER_URL=$APPID_OAUTHSERVERURL"
        ibmcloud ce secret update --name appid.client-id-catalog-service  --from-literal "APPID_CLIENT_ID=$APPID_CLIENT_ID"

        #####################

        IMAGE_NAME_BACKEND="$REGISTRY_URL"/"$REGISTRY_NAMESPACE"/"$IMAGES_NAME_BACKEND":"$REGISTRY_TAG"
        echo $IMAGE_NAME_BACKEND
        ibmcloud ce application update --name $APPLICATION_CONTAINER_NAME_BACKEND \
                                      --image $IMAGE_NAME_BACKEND \
                                      --env-from-secret postgres.certificate-data \
                                      --env-from-secret postgres.username \
                                      --env-from-secret postgres.password \
                                      --env-from-secret postgres.url \
                                      --env-from-secret appid.oauthserverurl \
                                      --env-from-secret appid.client-id-catalog-service \
                                      --cpu "1" \
                                      --memory "2G" \
                                      --port 8081 \
                                      --registry-secret "$REGISTRY_SECRET_NAME" \
                                      --max-scale 1 \
                                      --min-scale 0 
                                          
        SERVICE_BACKEND_URL=$(ibmcloud ce application get --name "$APPLICATION_CONTAINER_NAME_BACKEND" -o url)
        echo "SERVICE_BACKEND_URL: $SERVICE_BACKEND_URL"
        ibmcloud ce application events --application $APPLICATION_CONTAINER_NAME_BACKEND
