apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-backend
spec:
  workspaces:
    - name: workspace-backend-tenant 
  stepTemplate:
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
            optional: true
      - name: TRIGGER_NAME
        valueFrom:
          fieldRef:
            fieldPath: metadata.annotations['devops.cloud.ibm.com/trigger-name']
  params:
    - name: ibmcloud-api
      description: the ibmcloud api
    - name: continuous-delivery-context-secret
      description: name of the secret containing the continuous delivery pipeline context secrets
      default: secure-properties
    - name: ibmcloud-apikey-secret-key
      description: field in the secret that contains the api key used to login to ibmcloud
      default: apikey
    - name: IBM_CLOUD_RESOURCE_GROUP
    - name: IBM_CLOUD_REGION
    - name: CODE_ENGINE_PROJECT_NAME
    - name: APPID_SERVICE_KEY_NAME
    - name: POSTGRES_SERVICE_KEY_NAME
    - name: REGISTRY_URL
    - name: REGISTRY_NAMESPACE
    - name: REGISTRY_TAG
    - name: REGISTRY_SECRET_NAME
    - name: IMAGES_NAME_BACKEND
    - name: APPLICATION_CONTAINER_NAME_BACKEND
  steps:
    - name: deploy-backend
      image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.3
      script: |
        #!/bin/bash
        echo "deploy-backend"        
        set -x
        cd $(workspaces.workspace-backend-tenant.path)

        ibmcloud config --check-version false
        ibmcloud login -a $(params.ibmcloud-api) --no-region --apikey $API_KEY
        ibmcloud target -g $(params.IBM_CLOUD_RESOURCE_GROUP)
        ibmcloud target -r $(params.IBM_CLOUD_REGION)

        ibmcloud plugin install code-engine  
        
        #####################

        ibmcloud ce project select -n $(params.CODE_ENGINE_PROJECT_NAME)
        ibmcloud ce project select -n $(params.CODE_ENGINE_PROJECT_NAME) --kubecfg
        ibmcloud ce project get --name $(params.CODE_ENGINE_PROJECT_NAME)

        #####################

        ibmcloud resource service-key $(params.POSTGRES_SERVICE_KEY_NAME) --output JSON > ./postgres-key-temp.json  

        POSTGRES_CERTIFICATE_CONTENT_ENCODED=$(cat ./postgres-key-temp.json | jq '.[].credentials.connection.cli.certificate.certificate_base64' | sed 's/"//g' ) 
        POSTGRES_USERNAME=$(cat ./postgres-key-temp.json | jq '.[].credentials.connection.postgres.authentication.username' | sed 's/"//g' )
        POSTGRES_PASSWORD=$(cat ./postgres-key-temp.json | jq '.[].credentials.connection.postgres.authentication.password' | sed 's/"//g' )
        POSTGRES_HOST=$(cat ./postgres-key-temp.json | jq '.[].credentials.connection.postgres.hosts[].hostname' | sed 's/"//g' )
        POSTGRES_PORT=$(cat ./postgres-key-temp.json | jq '.[].credentials.connection.postgres.hosts[].port' | sed 's/"//g' )
      
        POSTGRES_CERTIFICATE_DATA=$(echo "$POSTGRES_CERTIFICATE_CONTENT_ENCODED" | base64 -d)

        POSTGRES_CONNECTION_TYPE='jdbc:postgresql://'
        POSTGRES_CERTIFICATE_PATH='/cloud-postgres-cert'
        POSTGRES_DATABASE_NAME="ibmclouddb"
        POSTGRES_URL="$POSTGRES_CONNECTION_TYPE$POSTGRES_HOST:$POSTGRES_PORT/$POSTGRES_DATABASE_NAME?sslmode=verify-full&sslrootcert=$POSTGRES_CERTIFICATE_PATH"

        #####################

        ibmcloud resource service-key $(params.APPID_SERVICE_KEY_NAME) --output JSON > ./appid-key-temp.json

        APPID_OAUTHSERVERURL=$(cat ./appid-key-temp.json | jq '.[].credentials.oauthServerUrl' | sed 's/"//g' ) 
        APPID_CLIENT_ID=$(cat ./appid-key-temp.json | jq '.[].credentials.clientId' | sed 's/"//g' )

        #####################
        
        ibmcloud ce secret update --name postgres.certificate-data --from-literal "POSTGRES_CERTIFICATE_DATA=$POSTGRES_CERTIFICATE_DATA"
        ibmcloud ce secret update --name postgres.username --from-literal "POSTGRES_USERNAME=$POSTGRES_USERNAME"
        ibmcloud ce secret update --name postgres.password --from-literal "POSTGRES_PASSWORD=$POSTGRES_PASSWORD"
        ibmcloud ce secret update --name postgres.url --from-literal "POSTGRES_URL=$POSTGRES_URL"

        ibmcloud ce secret update --name appid.oauthserverurl --from-literal "APPID_AUTH_SERVER_URL=$APPID_OAUTHSERVERURL"
        ibmcloud ce secret update --name appid.client-id-catalog-service  --from-literal "APPID_CLIENT_ID=$APPID_CLIENT_ID"

        #####################

        ACTION="create"
        CHECK=$(ibmcloud ce application get --name $(params.APPLICATION_CONTAINER_NAME_BACKEND) | awk '/Name:/ {print $2}')
        if [[ $CHECK == $(params.APPLICATION_CONTAINER_NAME_BACKEND)* ]]
        then
            echo "Application already exists"
            ACTION="update"
        else
            echo "Application does not exist"
        fi
        
        IMAGE_NAME_BACKEND="$(params.REGISTRY_URL)"/"$(params.REGISTRY_NAMESPACE)"/"$(params.IMAGES_NAME_BACKEND)":"$(params.REGISTRY_TAG)"
        echo $IMAGE_NAME_BACKEND
        ibmcloud ce application $ACTION --name $(params.APPLICATION_CONTAINER_NAME_BACKEND) \
                                      --image $IMAGE_NAME_BACKEND \
                                      --env-from-secret postgres.certificate-data \
                                      --env-from-secret postgres.username \
                                      --env-from-secret postgres.password \
                                      --env-from-secret postgres.url \
                                      --env-from-secret appid.oauthserverurl \
                                      --env-from-secret appid.client-id-catalog-service \
                                      --cpu "1" \
                                      --memory "2G" \
                                      --port 8081 \
                                      --registry-secret "$(params.REGISTRY_SECRET_NAME)" \
                                      --max-scale 1 \
                                      --min-scale 1 
                                          
        SERVICE_BACKEND_URL=$(ibmcloud ce application get --name "$(params.APPLICATION_CONTAINER_NAME_BACKEND)" -o url)
        echo "SERVICE_BACKEND_URL: $SERVICE_BACKEND_URL"
        ibmcloud ce application events --application $(params.APPLICATION_CONTAINER_NAME_BACKEND)
