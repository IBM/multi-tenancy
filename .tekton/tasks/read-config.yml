apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: read-config
spec:
  workspaces:
    - name: output
      description: shared workspace
  stepTemplate:
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
            optional: true
      - name: TRIGGER_NAME
        valueFrom:
          fieldRef:
            fieldPath: metadata.annotations['devops.cloud.ibm.com/trigger-name']
      - name: PIPELINE_ID
        valueFrom:
          fieldRef:
            fieldPath: metadata.annotations['devops.cloud.ibm.com/pipeline-id']
  params:
    - name: ibmcloud-api
      description: the ibmcloud api
    - name: test-param
      description: test-param
    - name: continuous-delivery-context-secret
      description: name of the secret containing the continuous delivery pipeline context secrets
      default: secure-properties
    - name: ibmcloud-apikey-secret-key
      description: field in the secret that contains the api key used to login to ibmcloud
      default: apikey
    - name: app-name
  steps:
    - name: task-read-config
      image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.3
      script: |
        #!/bin/bash
        echo "task-read-config"        
        set -x
        cd $(workspaces.output.path)
        #pwd
        #ls
        #cat config-tenants/tenant-a-parameters.json

        export CONFIG_FILE="installapp/tenants-config/tenant-a-parameters.json"
        export PROJECT_NAME=$(cat ./$CONFIG_FILE | jq '.[].codeengine.PROJECT_NAME' | sed 's/"//g') 

        export POSTGRES_SERVICE_INSTANCE=$(cat ./$CONFIG_FILE | jq '.[].postgres.POSTGRES_SERVICE_INSTANCE' | sed 's/"//g') 
        export POSTGRES_SERVICE_KEY_NAME=$(cat ./$CONFIG_FILE | jq '.[].postgres.POSTGRES_SERVICE_KEY_NAME' | sed 's/"//g')
        export POSTGRES_SQL_FILE=$(cat ./$CONFIG_FILE | jq '.[].postgres.POSTGRES_SQL_FILE' | sed 's/"//g')

        export FRONTEND_IMAGE=$(cat ./$CONFIG_FILE | jq '.[].container_images.FRONTEND_IMAGE' | sed 's/"//g')
        export SERVICE_CATALOG_IMAGE=$(cat ./$CONFIG_FILE | jq '.[].container_images.SERVICE_CATALOG_IMAGE' | sed 's/"//g')

        export SERVICE_CATALOG_NAME=$(cat ./$CONFIG_FILE | jq '.[].applications.SERVICE_CATALOG_NAME' | sed 's/"//g')
        export FRONTEND_NAME=$(cat ./$CONFIG_FILE | jq '.[].applications.FRONTEND_NAME' | sed 's/"//g')
        export FRONTEND_CATEGORY=$(cat ./$CONFIG_FILE | jq '.[].applications.FRONTEND_CATEGORY' | sed 's/"//g')

        export YOUR_SERVICE_FOR_APPID=$(cat ./$CONFIG_FILE | jq '.[].appid.APPID_SERVICE_INSTANCE_NAME' | sed 's/"//g')
        export APPID_SERVICE_KEY_NAME=$(cat ./$CONFIG_FILE | jq '.[].appid.APPID_SERVICE_KEY_NAME' | sed 's/"//g')



        #echo "niklas"
        env
        #ibmcloud dev help

        ibmcloud config --check-version false
        ibmcloud login -a $(params.ibmcloud-api) --no-region --apikey $API_KEY
        # to be done: read from json
        ibmcloud target -g "resource-group-niklas-heidloff7"
        # to be done: read from json
        ibmcloud target -r "eu-de"      

        ibmcloud dev toolchains

        #cat ${TOOLCHAIN_DATA_PATH}

        echo $TRIGGER_NAME

        echo $PIPELINE_ID

        echo $(params.app-name)

        #ibmcloud dev pipeline-get $PIPELINE_ID

        TOOLCHAIN_ID=$(ibmcloud dev toolchain-get $(params.app-name))

        ALMOST_OTHER_PIPELINE_ID=$(ibmcloud dev toolchain-get $TOOLCHAIN_ID | grep "pipeline-frontend" -A 1 | grep -v "frontend")

        OTHER_PIPELINE_ID=$(echo $ALMOST_OTHER_PIPELINE_ID | cut -c5-40)

        echo $OTHER_PIPELINE_ID

        TENANT_ID="tenant-b-parameters"

        ibmcloud dev tekton-trigger $OTHER_PIPELINE_ID --trigger-name $TENANT_ID

        

        #ibmcloud dev toolchain-get ${app-name}
        
        